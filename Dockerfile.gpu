# Use Ubuntu 22.04 (will be supported until April 2027)
FROM nvidia/cuda:12.4.1-cudnn-devel-ubuntu22.04

ARG DEBIAN_FRONTEND=noninteractive

# change from /bin/sh to /bin/bash as the default shell
SHELL ["/bin/bash", "-c"]

# Add openMVG binaries to path
ENV PATH $PATH:/opt/openMVG_Build/install/bin

RUN apt -y update; apt -y upgrade; \
    apt -y --no-install-recommends install software-properties-common; \
    add-apt-repository ppa:deadsnakes/ppa

ARG PYTHON_VERSION

# Get dependencies
RUN apt update; apt install -y wget \
    $(echo "python$PYTHON_VERSION") \
    $(echo "python$PYTHON_VERSION-dev") \
    $(echo "python$PYTHON_VERSION-distutils") \
    python-is-python3

RUN wget https://bootstrap.pypa.io/get-pip.py; \
    $(echo "python$PYTHON_VERSION") get-pip.py; \
    $(echo "python$PYTHON_VERSION") -m pip install --upgrade pip; \
    rm get-pip.py

# poetry-plugin-up lets you bump versions in pyproject.toml to the version you have installed if you have updated
RUN pip install poetry; \
    poetry config installer.max-workers 10; \
    poetry self add poetry-plugin-up

RUN apt update; apt install -y tzdata; \
    apt install -y \
    cmake \
    build-essential \
    graphviz \
    git \
    libceres-dev \
    coinor-libclp-dev \
    libflann-dev \
    libjpeg-dev \
    liblemon-dev \
    libpng-dev \
    libtiff-dev; apt -y autoremove; apt -y clean

# Clone the openvMVG repo
ADD . /opt/openMVG
RUN cd /opt/openMVG && git submodule update --init --recursive

# Build
RUN mkdir /opt/openMVG_Build; \
    cd /opt/openMVG_Build; \
    cmake -DCMAKE_BUILD_TYPE=RELEASE \
    -DCMAKE_INSTALL_PREFIX="/opt/openMVG_Build/install" \
    -DOpenMVG_BUILD_TESTS=ON \
    -DOpenMVG_BUILD_EXAMPLES=OFF \
    -DCOINUTILS_INCLUDE_DIR_HINTS=/usr/include \
    -DLEMON_INCLUDE_DIR_HINTS=/usr/include/lemon \
    -DCLP_INCLUDE_DIR_HINTS=/usr/include \
    -DOSI_INCLUDE_DIR_HINTS=/usr/include \
    ../openMVG/src; \
    make -j$(($(nproc) - 2));

RUN cd /opt/openMVG_Build && make test && make install;

# openMVS dependencies
RUN apt install -y libopencv-dev libcgal-dev libboost-all-dev
RUN git clone https://gitlab.com/libeigen/eigen.git; cd eigen; mkdir build; cd build; cmake ..; make -j$(($(nproc) - 2)); make install
RUN cd /root; git clone https://github.com/cnr-isti-vclab/vcglib.git
RUN cd /root; git clone --recurse-submodules https://github.com/cdcseacave/openMVS.git
RUN cd /root/openMVS; mkdir make; cd make; cmake .. -DOpenMVS_USE_CUDA=OFF -DVCG_ROOT=/root/vcglib; cmake --build . -j$(($(nproc) - 2)); cmake --install .
ENV PATH=$PATH:/root/openMVS/make/bin

RUN mkdir -p /home/Ascent-openMVG
COPY poetry.lock pyproject.toml /home/Ascent-openMVG/
WORKDIR /home/Ascent-openMVG/
RUN poetry install ; \
    poetry run poe pytorch

ENV PYTHONPATH="${PYTHONPATH}:/home/Ascent-openMVG/src"
